bls_search
==========

In order to get a series from the BLS API, you need to know its Series ID, a unique identifier. One way is to browse the BLS website's `data section`_. Another way to get Series IDs is to use blsconnect's ``bls_search()`` function, which most users will find easier for most purposes. This function takes various inputs and returns a dictionary, where the values of this dictionary are Series ID's. The dict returned by this can be input directly into ``RequestBLS.series()`` without any additional transformation.

The main keyword argument required for ``bls_search()`` is ``data=``. This specifies what sort of data you want, e.g. unemploymen rate or CPI.

From there, you can choose what you want to specify. By default, all data is as aggregated as possible and seasonally-adjusted.

All keyword arguments can be turned into a list, and all possible combinations of series generated by the arguments in the lists will be returned.

In addition to all the ways to specify the series (outlined below), there is one more keyword argument, ``return_type``, which changes how the data is returned. (No matter how ``return_type`` is specified, the returned object will be a valid input for ``RequestBLS().series()``).

- ``return_type='short'`` : (Default) The key in the dict will only contain the elements that were in list format. So for example, if the only list you input is in the ``state`` kwarg, this option will make it so each key is just ``{'state'=some_state}``. If there are no iterable kwargs, it will behave like ``return_type='full'``.
- ``return_type='full'`` : Returns the tupled kwargs (other than return_type) as the key, whether or not it was iterated over.
- ``return_type='list'`` : Only returns the list of Series ID's without a way to identify which is which.

Example
-------

.. code-block:: python

    import pandas as pd
    from blsconnect import bls_search
    
    # Seasonally-adjusted unemployment rate (U3)
    national_unemployment_rate = bls_search(data="ur")
    print(national_unemployment_rate)
    
    # Seasonally-adjusted and unadjusted core CPI
    core_cpi_series = bls_search(data="cpi-food-energy", sa=[True, False])
    print(core_cpi_series)
    
    # Seasonally adjusted and unadjusted regional CPIs.
    regional_cpis = bls_search(data="cpi", sa=False, region=["northeast", "midwest", "south", "west"])
    print(regional_cpis)
    
    # Core CPI and unemployment (national) in list format
    cpi_and_ur = bls_search(data=["cpi-food-energy", "ur"], return_type="list")
    print(cpi_and_ur)


Series Dictionary
-----------------

Employment Data
~~~~~~~~~~~~~~~

.. list-table:: Data
   :widths: 15, 15, 30
   :header-rows: 1
   :stub-columns: 1

   * - Series
     - data=?
     - Notes
   * - Unemployment Rate 
     - ``"ur"``, ``"u3"``, ``"unemployment rate"``
     - All employment-related series are from either the Current Population Survey (CPS) for national data, or the Local Area Unemployment Statistics (LAUS) for regional data.
   * - Employment
     - ``"e"``, ``"employment"``
     - See above.
   * - Unemployment
     - ``"u"``, ``"unemployment"``
     - See above.
   * - Labor Force
     - ``"lf"``, ``"labor force"``
     - See above.
   * - Labor Force Participation Rate
     - ``"lfpr"``, ``"labor force participation rate"``
     - Not available for regional data, only national.

.. list-table:: Options
   :widths: 15, 20, 25
   :header-rows: 1
   :stub-columns: 1

   * - Keyword Argument
     - Valid Inputs
     - Notes
   * - sa
     - ``True`` or ``False``
     - Seasonal adjustments.
   * - state
     - 2-letter abbreviations for all 50 states, plus ``"US"``
     - 

Price Level Data
~~~~~~~~~~~~~~~~

.. list-table:: Data
   :widths: 15, 15, 30
   :header-rows: 1
   :stub-columns: 1

   * - Series
     - Data=?
     - Notes
   * - Consumer Price Index - All Items
     - ``"cpi"``, ``"consumer price index"``
     - 
   * - Consumer Price Index - All Items Less _____.
     - ``"cpi-food"``, ``"cpi-medical"``, ``"cpi-food-shelter"``, ``"cpi-food-energy"``, etc.
     - Order of subtracted items does not matter, however it cannot take invalid inputs (i.e. series that do not exist) such as ``"cpi-medical-food"``.

.. list-table:: Options
   :widths: 15, 20, 25
   :header-rows: 1
   :stub-columns: 1

   * - Keyword Argument
     - Valid Inputs
     - Notes
   * - sa
     - ``True`` or ``False``
     - Seasonal adjustments.
   * - region
     - ``None``, ``"northeast"``, ``"midwest"``, ``"south"``, ``"west"``
     - ``None`` returns all U.S.
   * - sizeclass
     - ``None``, ``"a"``, ``"b/c"``, ``"d"``.
     - For more, see the BLS.gov website: `Consumer Price Index Geographic Revision for 2018`_.


Development Notes
-----------------

``bls_search()`` is still very much in development and the code is, at the moment, very spaghetti. I have no intention on adding to the spaghetti, since that will only entrench the issues in the module. Please bear with me as I try to come up with a better way to code this, and try to see this more as a way to access some commonly utilized series and a proof of concept. Be sure to check back and update blsconnect through pip when it gets figured out. Thanks!

.. _data section: https://www.bls.gov/data/
.. _Consumer Price Index Geographic Revision for 2018 :https://www.bls.gov/cpi/additional-resources/geographic-revision-2018.htm